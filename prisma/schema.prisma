// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int          @id @default(autoincrement())
  oldId         Int?         @unique
  firstName     String?
  lastName      String?
  userName      String       @unique
  email         String       @unique
  password      String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  collections   Collection[]
}

model Collection {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  name        String       @unique
  url         String       @unique
  public      Boolean      @default(false)
  lastRefresh DateTime?
  favIcon     String?
  pages       SourcePage[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  chunks      Chunk[]
  chats       Chat[]
}

model Chunk {
  id           String                 @id @default(cuid())
  content      String
  vector       Unsupported("vector")?
  collection   Collection             @relation(fields: [collectionId], references: [id])
  collectionId Int
}

model SourcePage {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  url          String     @unique
  lastRefresh  DateTime?
  title        String
  content      String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
}

model Chat {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  name         String
  messages     Message[]
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  type      String
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}
